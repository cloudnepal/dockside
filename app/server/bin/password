#!/usr/bin/perl                                                                                                                                                                                                

BEGIN {
   $| = 1;
   unshift(@INC, "$ENV{'HOME'}/dockside/app/server/lib");
}

use strict;
use warnings;

use Term::ReadKey;
use Util qw(encrypt_password);

sub Usage {
   print STDERR "Usage: $0 [--check] <username>\n";
   exit(0);
}

sub read_password {
   my $key = 0;
   my $password = "";

   # Start reading the keys
   ReadMode(4); # Disable the control keys
   
   while($key = ReadKey(0)) {
      # This will continue until the Enter key is pressed (decimal value of 10)
      # For all value of ord($key) see http://www.asciitable.com/

      if( ord($key) == 10 ) {
         last;
      }

      if( ord($key) == 3 ) {
         ReadMode(0);
         kill 15, $$;
         exit(-1);
      }

      if( ord($key) == 127 || ord($key) == 8 ) {
         next unless $password ne '';
         
         # DEL/Backspace was pressed
         # 1. Remove the last char from the password
         chop($password);
         # 2 move the cursor back by one, print a blank character, move the cursor back by one
         print "\b \b";
      }
      elsif(ord($key) < 32) {
            # Do nothing with these control characters
      }
      else {
         $password .= $key;
         print "*";
      }
   }
   
   # Reset the terminal once we are done
   ReadMode(0);

   return $password;
}

my $User;
my $File = '/data/config/passwd';
my $Salt;
my $Check = 0;

while(@ARGV) {
   if( $ARGV[0] eq '-f' ) {
      shift; $File = shift(@ARGV);
   }
   elsif( $ARGV[0] eq '--check' ) {
      shift; $Check = 1;
   }
   else {
      $User = shift(@ARGV);
   }
}

&Usage() unless defined ($File) && defined ($User);

die "$0: File '$File' not found. To create new file, create empty file first.\n" unless -f $File;

open(FH, "+<", $File) || die "$0: Cannot open file: '$File'\n";

my $NewFile;
my @Rows;
my %Users;
while(<FH>) {
   chomp;
   
   push(@Rows, $_);

   next if /^#/;
   
   my @F = split(/:/, $_);
   $Users{$F[0]} = $_ if scalar(@F) == 2 && length($F[0]) && length($F[1]);
}

if( $Check ) {
   unless( $Users{$User} ) {
      print "User '$User' not found.\n";
      exit(1);
   }

   print "Checking password for user '$User'.\n";
   print "Please input password for user '$User': ";
   my $p1 = &read_password();
   print "\n";

   my @F = split(/:/, $Users{$User});
   my ($S, $E) = $F[1] =~ /^(\$(?:1|2a|5|6)\$[^\$]+\$)(.*)$/s;

   my $P = &encrypt_password($p1, $S);

   if( $P eq $F[1] ) {
      print "The password you entered matches.\n";
      exit(0);
   }
   else {
      print "The password you entered does not match.\n";
      exit(2);
   }

}

if($Users{$User}) {
   print "Please input new password for user '$User': ";
}
else {
   print "User '$User' not found: creating new user (CTRL-C to quit).\n";
   print "Please input password for user '$User': ";
}

my $p1 = &read_password();
print "\n";

print "Please input your password again: ";
my $p2 = &read_password();
print "\n";

if( $p1 ne $p2 ) {
    print "Your passwords do not match, aborting, please try again.\n";
    exit(2);
}

seek(FH, 0, 0);
truncate(FH,0);

foreach (@Rows) {
   my @F = split(/:/, $_);

   if(!m/^\#/ && scalar(@F) == 2 && length($F[0]) && length($F[1])) {
      if($F[0] eq $User) {
         $F[1] = &encrypt_password($p1, $Salt);
      }

      print FH join(':', @F) . "\n";    
   }
   else {
      print FH "$_\n";
   }    
}

unless( exists $Users{$User} ) {
    print FH "$User:" . &encrypt_password($p1, $Salt) . "\n";
}

close FH;

print "Password for user '$User' successfully added/changed.\n";

exit(0);

1;

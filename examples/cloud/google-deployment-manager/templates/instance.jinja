{#
#}

resources:
- name: {{ properties["name"] }}
  type: compute.v1.instance
  properties:
    zone: {{ properties["machine_zone"] }}
    machineType: https://www.googleapis.com/compute/v1/projects/{{ env["project"] }}/zones/{{ properties["machine_zone"] }}/machineTypes/{{ properties["machine_type"] }}
    disks:
    - deviceName: boot
      type: PERSISTENT
      boot: true
      autoDelete: true
      initializeParams:
        diskType: https://www.googleapis.com/compute/v1/projects/{{ env["project"] }}/zones/{{ properties["machine_zone"] }}/diskTypes/{{ properties["disk_type"] }}
        diskSizeGb: {{ properties["disk_size"] }}
        sourceImage: {{ properties["disk_image"] }}
    tags:
      items:
      - http-server
      - https-server
      - dns-server
    networkInterfaces:
    - network: global/networks/default
      accessConfigs:
      - name: External-IP
        type: ONE_TO_ONE_NAT
    serviceAccounts: 
    - email: "default"
      scopes: 
        - "https://www.googleapis.com/auth/devstorage.read_only"
        - "https://www.googleapis.com/auth/logging.write"
        - "https://www.googleapis.com/auth/monitoring.write"
        - "https://www.googleapis.com/auth/servicecontrol"
        - "https://www.googleapis.com/auth/service.management.readonly"
        - "https://www.googleapis.com/auth/compute"
    metadata:
      items:
      - key: startup-script
        value: |
          DNS_NAME={{ properties["dns_name"] }}
          DOCKER_IMAGE="{{ properties["dockside_image"] }}"

          if [ -f /startup-script.done ]; then exit 0; fi

          # Install bind9 and docker dependencies
          apt install -y apt-transport-https ca-certificates curl gnupg-agent

          # Set max_inotify_watches: the Dockside Theia IDE needs a lot!
          cat >/etc/sysctl.d/fs.inotify.max_user_watches.conf <<_EOE_
          fs.inotify.max_user_watches=524288
          _EOE_
          sysctl -q --load=/etc/sysctl.d/fs.inotify.max_user_watches.conf

          # Set up and install docker
          mkdir -p /etc/docker && cat >/etc/docker/daemon.json <<_EOE_
          {
            "live-restore": true,
            "userland-proxy": false
          }
          _EOE_
          curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
          echo "deb [arch=amd64] https://download.docker.com/linux/debian buster stable" >/etc/apt/sources.list.d/docker.list
          apt update && \
          apt install -y docker-ce docker-ce-cli containerd.io \
              lxcfs \
              qemu binfmt-support qemu-user-static && \
          apt remove g++ g++-8 libstdc++-8-dev

          # Install qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

          # Pull Dockside
          docker pull $DOCKER_IMAGE

          # Launch Dockside
          mkdir ~/.dockside
          docker run -d --name dockside -v ~/.dockside:/data -v /var/run/docker.sock:/var/run/docker.sock -p 443:443 -p 80:80 -p 53:53/udp $DOCKER_IMAGE --ssl-letsencrypt --ssl-zone $DNS_NAME --lxcfs-available

          touch /startup-script.done